<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var methods = new[]
    {
        "SingleQueue", 
        "DoubleQueue", 
        "Binary",  
        "Text",
    };

    // Send(byte[] message)
    Func<string, string> BinaryArraySendMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new SentMessage(new ArraySegment<byte>(message), WebSocketMessageType.Binary));";
        }

        if (methods[1] == method)
        {
            return "return _binarySendMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));";
        }

        if (methods[2] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));";
        }

        if (methods[3] == method)
        {
            return String.Format("throw new NotImplementedException(\"{0}WebSocketClient cannot send string.\");", methods[3]);
        }

        return "";
    };

    // Send(ArraySegment<byte> message)
    Func<string, string> BinaryArraySegmentSendMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new SentMessage(message, WebSocketMessageType.Binary));";
        }

        if (methods[1] == method)
        {
            return "return _binarySendMessageQueueWriter.TryWrite(message);";
        }

        if (methods[2] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(message);";
        }

        if (methods[3] == method)
        {
            return String.Format("throw new NotImplementedException(\"{0}WebSocketClient cannot send string.\");", methods[3]);
        }

        return "";
    };

    // Send(string message)
    Func<string, string> StringTextSendMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new SentMessage(new ArraySegment<byte>(MessageEncoding.GetBytes(message)), WebSocketMessageType.Text));";
        }

        if (methods[1] == method)
        {
            return "return _textSendMessageQueueWriter.TryWrite(new ArraySegment<byte>(MessageEncoding.GetBytes(message)));";
        }

        if (methods[2] == method)
        {
            return String.Format("throw new NotImplementedException(\"{0}WebSocketClient cannot send string.\");", methods[2]);
        }

        if (methods[3] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new ArraySegment<byte>(MessageEncoding.GetBytes(message)));";
        }

        return "";
    };

    //Send(byte[] message, WebSocketMessageType messageType)
    Func<string, string> BinaryArraySendMethodWithType = method =>
    {
        if (methods[0] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new SentMessage(new ArraySegment<byte>(message), messageType));";
        }

        if (methods[1] == method)
        {
            return @"
            if (messageType == WebSocketMessageType.Binary)
            {
                return _binarySendMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));
            }
            else
            {
                return _textSendMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));
            }";
        }

        if (methods[2] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Binary)
            {
                throw new WebSocketBadInputException($""In BinaryWebSocketClient, the message type must be binary."");
            }
            return _sentMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));";
        }

        if (methods[3] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Text)
            {
                throw new WebSocketBadInputException($""In TextWebSocketClient, the message type must be text."");
            }
            return _sentMessageQueueWriter.TryWrite(new ArraySegment<byte>(message));";
        }

        return "";
    };

    //Send(ArraySegment<byte> message, WebSocketMessageType messageType)
    Func<string, string> ArraySegmentSendMethodWithType = method =>
    {
        if (methods[0] == method)
        {
            return "return _sentMessageQueueWriter.TryWrite(new SentMessage(message, messageType));";
        }

        if (methods[1] == method)
        {
            return @"
            if (messageType == WebSocketMessageType.Binary)
            {
                return _binarySendMessageQueueWriter.TryWrite(message);
            }
            else
            {
                return _textSendMessageQueueWriter.TryWrite(message);
            }";
        }

        if (methods[2] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Binary)
            {
                throw new WebSocketBadInputException($""In BinaryWebSocketClient, the message type must be binary."");
            }
            return _sentMessageQueueWriter.TryWrite(message);";
        }

        if (methods[3] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Text)
            {
                throw new WebSocketBadInputException($""In TextWebSocketClient, the message type must be text."");
            }
            return _sentMessageQueueWriter.TryWrite(message);";
        }

        return "";
    };

    // SendInstant(string message)
    Func<string, string> StringTextSendInstantMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return SendInternalSynchronized(new SentMessage(new ArraySegment<byte>(MessageEncoding.GetBytes(message)), WebSocketMessageType.Text));";
        }

        if (methods[1] == method)
        {
            return "return SendTextInternalSynchronized(new ArraySegment<byte>(MessageEncoding.GetBytes(message)));";
        }

        if (methods[2] == method)
        {
            return String.Format("throw new NotImplementedException(\"{0}WebSocketClient cannot send string.\");", methods[2]);
        }

        if (methods[3] == method)
        {
            return "return SendInternalSynchronized(new ArraySegment<byte>(MessageEncoding.GetBytes(message)));";
        }

        return "";
    };


    // SendInstant(byte[] message)
    Func<string, string> BinaryArraySendInstantMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return SendInternalSynchronized(new SentMessage(new ArraySegment<byte>(message), WebSocketMessageType.Binary));";
        }

        if (methods[1] == method)
        {
            return "return SendBinaryInternalSynchronized(new ArraySegment<byte>(message));";
        }

        if (methods[2] == method)
        {
            return "return SendInternalSynchronized(new ArraySegment<byte>(message));";
        }

        if (methods[3] == method)
        {
            return String.Format("throw new NotImplementedException(\"{0}WebSocketClient cannot send binary.\");", methods[2]);
        }

        return "";
    };

    //SendInstant(byte[] message, WebSocketMessageType messageType)
    Func<string, string> BinaryArraySendInstantMethodWithType = method =>
    {
        if (methods[0] == method)
        {
            return "return SendInternalSynchronized(new SentMessage(new ArraySegment<byte>(message), messageType));";
        }

        if (methods[1] == method)
        {
            return @"
            if (messageType == WebSocketMessageType.Binary)
            {
                return SendBinaryInternalSynchronized(new ArraySegment<byte>(message));
            }
            else
            {
                return SendTextInternalSynchronized(new ArraySegment<byte>(message));
            }";
        }

        if (methods[2] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Binary)
            {
                throw new WebSocketBadInputException($""In BinaryWebSocketClient, the message type must be binary."");
            }

            return SendInternalSynchronized(new ArraySegment<byte>(message));";
        }

        if (methods[3] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Text)
            {
                throw new WebSocketBadInputException($""In TextWebSocketClient, the message type must be text."");
            }
            return SendInternalSynchronized(new ArraySegment<byte>(message));";
        }

        return "";
    };

    //SendInstant(ArraySegment<byte> message)
    Func<string, string> ArraySegmentSendInstantMethod = method =>
    {
        if (methods[0] == method)
        {
            return "return SendInternalSynchronized(new SentMessage(message, WebSocketMessageType.Binary));";
        }

        if (methods[1] == method)
        {
            return @"return SendBinaryInternalSynchronized(message);";
        }

        if (methods[2] == method)
        {
            return @"return SendInternalSynchronized(message);";
        }

        if (methods[3] == method)
        {
            return @"throw new WebSocketBadInputException($""In TextWebSocketClient, the message type must be text."");";
        }

        return "";
    };

    // SendInstant(ArraySegment<byte> message, WebSocketMessageType messageType)
    Func<string, string> ArraySegmentSendInstantMethodWithType = method =>
    {
        if (methods[0] == method)
        {
            return "return SendInternalSynchronized(new SentMessage(message, WebSocketMessageType.Binary));";
        }

        if (methods[1] == method)
        {
            return @"
            if (messageType == WebSocketMessageType.Binary)
            {
                return SendBinaryInternalSynchronized(message);
            }
            else
            {
                return SendTextInternalSynchronized(message);
            }";
        }

        if (methods[2] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Binary)
            {
                throw new WebSocketBadInputException($""In BinaryWebSocketClient, the message type must be binary."");
            }

            return SendInternalSynchronized(message);";
        }

        if (methods[3] == method)
        {
            return @"
            if (messageType != WebSocketMessageType.Text)
            {
                throw new WebSocketBadInputException($""In TextWebSocketClient, the message type must be text."");
            }
            return SendInternalSynchronized(message);";
        }

        return "";
    };

    //Set SendInternalSynchronized
    Func<string, string> SetSendInternalSynchronized = method =>
    {
        if (methods[0] == method)
        {
            return @"
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private async Task SendInternalSynchronized(SentMessage message)
            {
                using (await _sendLocker.LockAsync().ConfigureAwait(false))
                {
                    if (!IsOpen)
                    {
                        _logger?.Warn(FormatLogMessage($""Client is not connected to server, cannot send:  {message}""));
                        return;
                    }

                    _logger?.Log(FormatLogMessage($""Sending:  {message}""));

                    await _socket
                        .SendAsync(message.Bytes, message.MessageType, true, _cancellationCurrentJobs.Token)
                        .ConfigureAwait(false);
                }
            }";
        }

        if (methods[1] == method)
        {
            return @"
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private async Task SendBinaryInternalSynchronized(ArraySegment<byte> message)
            {
                using (await _sendLocker.LockAsync().ConfigureAwait(false))
                {
                    if (!IsOpen)
                    {
                        _logger?.Warn(FormatLogMessage($""Client is not connected to server, cannot send:  {message}""));
                        return;
                    }

                    _logger?.Log(FormatLogMessage($""Sending:  {message}""));

                    await _socket
                        .SendAsync(message, WebSocketMessageType.Binary, true, _cancellationCurrentJobs.Token)
                        .ConfigureAwait(false);
                }
            }
        
                
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private async Task SendTextInternalSynchronized(ArraySegment<byte> message)
            {
                using (await _sendLocker.LockAsync().ConfigureAwait(false))
                {
                    if (!IsOpen)
                    {
                        _logger?.Warn(FormatLogMessage($""Client is not connected to server, cannot send:  {message}""));
                        return;
                    }

                    _logger?.Log(FormatLogMessage($""Sending:  {message}""));

                    await _socket
                        .SendAsync(message, WebSocketMessageType.Text, true, _cancellationCurrentJobs.Token)
                        .ConfigureAwait(false);
                }
            }";
        }

        if (methods[2] == method)
        {
            return @"
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private async Task SendInternalSynchronized(ArraySegment<byte> message)
            {
                using (await _sendLocker.LockAsync().ConfigureAwait(false))
                {
                    if (!IsOpen)
                    {
                        _logger?.Warn(FormatLogMessage($""Client is not connected to server, cannot send binary, length: {message.Count}""));
                        return;
                    }

                    _logger?.Log(FormatLogMessage($""Sending binary, length: {message.Count}""));

                    await _socket
                        .SendAsync(message, WebSocketMessageType.Binary, true, _cancellationCurrentJobs.Token)
                        .ConfigureAwait(false);
                }
            }";
        }

        if (methods[3] == method)
        {
            return @"
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private async Task SendInternalSynchronized(ArraySegment<byte> message)
            {
                using (await _sendLocker.LockAsync().ConfigureAwait(false))
                {
                    if (!IsOpen)
                    {
                        _logger?.Warn(FormatLogMessage($""Client is not connected to server, cannot send binary, length: {message.Count}""));
                        return;
                    }

                    _logger?.Log(FormatLogMessage($""Sending binary, length: {message.Count}""));

                    await _socket
                        .SendAsync(message, WebSocketMessageType.Text, true, _cancellationCurrentJobs.Token)
                        .ConfigureAwait(false);
                }
            }";
        }

        return "";
    };


    //SendMessageFromQueue
    Func<string, string> SetSendMessageFromQueue = method =>
    {
        if(method == methods[1])
        {
        return @"        
        private async Task SendBinaryMessageFromQueue()
        {
            try
            {
                while (await _binarySendMessageQueueReader.WaitToReadAsync(_cancellationAllJobs.Token).ConfigureAwait(false))
                {
                    while (_binarySendMessageQueueReader.TryRead(out var message))
                    {
                        try
                        {
                            await SendBinaryInternalSynchronized(message).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            _logger?.Error(e, FormatLogMessage($""Failed to send binary message: '{message}'. Error: {e.Message}""));
                            _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.Send));
                        }

                    }
                }
            }
            catch (TaskCanceledException)
            {
                // task was canceled, ignore
            }
            catch (OperationCanceledException)
            {
                // operation was canceled, ignore
            }
            catch (Exception e)
            {
                if (_cancellationAllJobs.IsCancellationRequested || IsDisposed)
                {
                    // disposing/canceling, do nothing and exit
                    return;
                }

                _logger?.Error(e, FormatLogMessage($""Sending message thread failed, error: {e.Message}.""));
                _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.SendQueue));
            }
        }
        
        private async Task SendTextMessageFromQueue()
        {
            try
            {
                while (await _textSendMessageQueueReader.WaitToReadAsync(_cancellationAllJobs.Token).ConfigureAwait(false))
                {
                    while (_textSendMessageQueueReader.TryRead(out var message))
                    {

                        try
                        {
                            await SendTextInternalSynchronized(message).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            _logger?.Error(e, FormatLogMessage($""Failed to send binary message: '{message}'. Error: {e.Message}""));
                            _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.Send));
                        }

                    }
                }
            }
            catch (TaskCanceledException)
            {
                // task was canceled, ignore
            }
            catch (OperationCanceledException)
            {
                // operation was canceled, ignore
            }
            catch (Exception e)
            {
                if (_cancellationAllJobs.IsCancellationRequested || IsDisposed)
                {
                    // disposing/canceling, do nothing and exit
                    return;
                }

                _logger?.Error(e, FormatLogMessage($""Sending message thread failed, error: {e.Message}.""));
                _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.SendQueue));
            }
        }
        ";
        }

        return @"        
        private async Task SendMessageFromQueue()
        {
            try
            {
                while (await _sentMessageQueueReader.WaitToReadAsync(_cancellationAllJobs.Token).ConfigureAwait(false))
                {
                    while (_sentMessageQueueReader.TryRead(out var message))
                    {

                        try
                        {
                            await SendInternalSynchronized(message).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            _logger?.Error(e, FormatLogMessage($""Failed to send binary message: '{message}'. Error: {e.Message}""));
                            _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.Send));
                        }

                    }
                }
            }
            catch (TaskCanceledException)
            {
                // task was canceled, ignore
            }
            catch (OperationCanceledException)
            {
                // operation was canceled, ignore
            }
            catch (Exception e)
            {
                if (_cancellationAllJobs.IsCancellationRequested || IsDisposed)
                {
                    // disposing/canceling, do nothing and exit
                    return;
                }

                _logger?.Error(e, FormatLogMessage($""Sending message thread failed, error: {e.Message}.""));
                _exceptionSubject.OnNext(new WebSocketExceptionDetail(e, ErrorType.SendQueue));
            }
        }";
    };

    //StartBackgroundThreadForSendingMessage
    Func<string, string> SetStartBackgroundThreadForSendingMessage = method =>
    {
        if(method == methods[1])
        {
            return @"
        private void StartBackgroundThreadForSendingMessage()
        {
#pragma warning disable 4014
            Task.Factory.StartNew(_ => SendBinaryMessageFromQueue(), TaskCreationOptions.LongRunning, _cancellationAllJobs.Token);
            Task.Factory.StartNew(_ => SendTextMessageFromQueue(), TaskCreationOptions.LongRunning, _cancellationAllJobs.Token);
#pragma warning restore 4014
        }";

        }

        return @"
        private void StartBackgroundThreadForSendingMessage()
        {
#pragma warning disable 4014
            Task.Factory.StartNew(_ => SendMessageFromQueue(), TaskCreationOptions.LongRunning, _cancellationAllJobs.Token);
#pragma warning restore 4014
        }";

    };
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.Net.WebSockets;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using RxWebSocket.Exceptions;
using RxWebSocket.Validations;
 
namespace RxWebSocket
{
<# foreach(var method in methods) { #>

public partial class <#= method #>WebSocketClient
    {
        public bool Send(string message)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= StringTextSendMethod(method) #>
            }
            else
            {
                throw new WebSocketBadInputException($"Input message (string) of the Send function is null or empty. Please correct it.");
            }
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// The message is inserted into the queue, and the actual sending takes place in background thread.
        /// </summary>
        /// <param name="message">Binary message to be sent</param>
        public bool Send(byte[] message)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= BinaryArraySendMethod(method) #>
            }
            else
            {
                throw new WebSocketBadInputException($"Input message (byte[]) of the Send function is null or 0 Length. Please correct it.");
            }
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// The message is inserted into the queue, and the actual sending takes place in background thread.
        /// </summary>
        /// <param name="message">Binary message to be sent</param>
        public bool Send(ArraySegment<byte> message)
        {
            if (ValidationUtils.ValidateInput(ref message))
            {
                <#= BinaryArraySegmentSendMethod(method) #>
            }
            else
            {
                throw new WebSocketBadInputException($"Input message (ArraySegment<byte>) of the Send function is 0 Count. Please correct it.");
            }
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// The message is inserted into the queue, and the actual sending takes place in background thread.
        /// </summary>
        /// <param name="message">Binary message to be sent</param>
        /// <param name="messageType"></param>
        public bool Send(byte[] message, WebSocketMessageType messageType)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= BinaryArraySendMethodWithType(method) #>
            }
            else
            {
                throw new WebSocketBadInputException($"Input message (byte[]) of the Send function is null or 0 Length. Please correct it.");
            }
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// The message is inserted into the queue, and the actual sending takes place in background thread.
        /// </summary>
        /// <param name="message">Binary message to be sent</param>
        /// <param name="messageType"></param>
        public bool Send(ArraySegment<byte> message, WebSocketMessageType messageType)
        {
            if (ValidationUtils.ValidateInput(ref message))
            {
                <#= ArraySegmentSendMethodWithType(method) #>
            }
            else
            {
                throw new WebSocketBadInputException($"Input message (ArraySegment<byte>) of the Send function is 0 Count. Please correct it.");
            }
        }

        /// <summary>
        /// Send text message to the websocket channel. 
        /// It doesn't use a queue.
        /// </summary>
        /// <param name="message">Message to be sent</param>
        public Task SendInstant(string message)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= StringTextSendInstantMethod(method) #>
            }

            throw new WebSocketBadInputException($"Input message (string) of the SendInstant function is null or empty. Please correct it.");
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// It doesn't use a queue.
        /// </summary>
        /// <param name="message">Message to be sent</param>
        public Task SendInstant(byte[] message)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= BinaryArraySendInstantMethod(method) #>
            }

            throw new WebSocketBadInputException($"Input message (byte[]) of the SendInstant function is null or 0 Length. Please correct it.");
        }

        public Task SendInstant(byte[] message, WebSocketMessageType messageType)
        {
            if (ValidationUtils.ValidateInput(message))
            {
                <#= BinaryArraySendInstantMethodWithType(method) #>
            }

            throw new WebSocketBadInputException($"Input message (byte[]) of the SendInstant function is null or 0 Length. Please correct it.");
        }

        /// <summary>
        /// Send binary message to the websocket channel. 
        /// It doesn't use a queue.
        /// </summary>
        /// <param name="message">Message to be sent</param>
        public Task SendInstant(ArraySegment<byte> message)
        {
            if (ValidationUtils.ValidateInput(ref message))
            {
                <#= ArraySegmentSendInstantMethod(method) #>
            }

            throw new WebSocketBadInputException($"Input message (ArraySegment<byte>) of the SendInstant function is 0 Count. Please correct it.");
        }

        public Task SendInstant(ArraySegment<byte> message, WebSocketMessageType messageType)
        {
            if (ValidationUtils.ValidateInput(ref message))
            {
                <#= ArraySegmentSendInstantMethodWithType(method) #>
            }

            throw new WebSocketBadInputException($"Input message (ArraySegment<byte>) of the SendInstant function is null or 0 Length. Please correct it.");
        }

        <#= SetSendMessageFromQueue(method) #>

        <#= SetStartBackgroundThreadForSendingMessage(method) #>

        <#= SetSendInternalSynchronized(method) #>
    }
<# } #>
}